{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","ALL","value","filterReducer","filters","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visiableTodos","useMemo","title","includes","ACTIVE","completed","COMPLETED","length","className","map","id","onClick","currentTodoAction","classNames","TodoFilter","onSubmit","event","preventDefault","onChange","target","filterActions","handleStatusChange","placeholder","handleQueryChange","style","pointerEvents","Loader","TodoModal","useState","isLoading","setIsLoading","useEffect","setTimeout","href","get","url","delay","fullURL","Promise","resolve","then","fetch","res","json","App","React","fetchData","a","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07769eeb.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusAction = { type: 'filter/STATUS'; payload: Status };\ntype QueryAction = { type: 'filter/QUERY'; payload: string };\n\ntype Action = StatusAction | QueryAction;\n\nconst setStatus = (value: Status): StatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\nconst setQuery = (value: string): QueryAction => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterReducer = (\n  filters: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...filters, status: action.payload };\n    case 'filter/QUERY':\n      return { ...filters, query: action.payload };\n    default:\n      return filters;\n  }\n};\n\nexport const actions = { setStatus, setQuery };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todos/ADD';\n  payload: Todo[];\n};\n\nconst setTodo = (todo: Todo[]): SetTodoAction => ({\n  type: 'todos/ADD',\n  payload: todo,\n});\n\nexport const actions = { setTodo };\n\ntype State = Todo[];\ntype Action = SetTodoAction;\n\nconst todosReducer = (state: State = [], action: Action): State => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const visiableTodos = useMemo(() => {\n    switch (filter.status) {\n      case Status.ALL:\n        return todos.filter(todo => todo.title.includes(filter.query));\n      case Status.ACTIVE:\n        return todos.filter(todo => !todo.completed).filter(todo => todo.title.includes(filter.query));\n      case Status.COMPLETED:\n        return todos.filter(todo => todo.completed).filter(todo => todo.title.includes(filter.query));\n      default:\n        return todos;\n    }\n  }, [todos, filter.status, filter.query]);\n\n  if (visiableTodos.length === 0) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visiableTodos.map(todo => (\n            <tr data-cy=\"todo\">\n              <td className=\"is-vcentered\">{todo.id}</td>\n              {todo.completed ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (\n                <td className=\"is-vcentered\"> </td>\n              )}\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={todo.completed ? 'has-text-success' : 'has-text-danger'}>{todo.title}</p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(currentTodoAction.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      { 'fa-eye': !currentTodo || todo.id !== currentTodo.id },\n                      { 'fa-eye-slash': currentTodo && todo.id === currentTodo.id },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case Status.ALL:\n        dispatch(filterActions.setStatus(Status.ALL));\n        break;\n      case Status.ACTIVE:\n        dispatch(filterActions.setStatus(Status.ACTIVE));\n        break;\n      case Status.COMPLETED:\n        dispatch(filterActions.setStatus(Status.COMPLETED));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => handleStatusChange(event)}\n            value={status}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQueryChange(event)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const closeModal = () => {\n    dispatch(currentTodoAction.removeTodo());\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 500);\n  }, [currentTodo]);\n\n  if (!currentTodo) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={!currentTodo.completed\n                  ? 'has-text-danger'\n                  : 'has-text-success'}\n              >\n                {currentTodo.completed ? 'Done' : 'Planned'}\n              </strong>\n              {' by '}\n              <a href=\"mailto:Sincere@april.biz\">Leanne Graham</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = React.useState(true);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useAppDispatch();\n\n  const fetchData = async () => {\n    try {\n      const todos = await getTodos();\n\n      dispatch(todosActions.setTodo(todos));\n    } catch {\n      dispatch(todosActions.setTodo([]));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}